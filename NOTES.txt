// TODO: re-do logging.
// TODO: Figure out if DoubleRefreqy should be incorporated into RefreqyFlex etc.
// TODO: Consider some simple caching to optimize performance, in particular for first word guess
// TODO: Consider resetting strategy objects instead of creating new ones all the time (perf)

# Recommended Strategy
Current best version is RefreqyFlex3

# Other Strategies

### v2
#### Score
RefreqyFlex3 v2 MAX_WRONGNESS = 5 RIGHT_PLACE_MULTIPLIER = 1
  winRate: 0.992,
  averageGuesses: 4.334

#### Misses
You guessed 'bezel' in 7 guesses!
You guessed 'hazel' in 7 guesses!
You guessed 'hawky' in 8 guesses!
You guessed 'bumpy' in 7 guesses!
You guessed 'foppy' in 7 guesses!
You guessed 'manny' in 7 guesses!
You guessed 'wanny' in 7 guesses!
You guessed 'pinny' in 7 guesses!

### v3
Only score the first new occurrence of each letter, to favor a wider variety of letters over guessing double-letters that are likely.

#### Score
RefreqyFlex3 v3 MAX_WRONGNESS = 5 RIGHT_PLACE_MULTIPLIER = 2
  winRate: 0.99,
  averageGuesses: 4.299

#### Missed
-> GAME            [INFO ] You guessed 'vower' in 7 guesses!
-> GAME            [INFO ] You guessed 'roper' in 7 guesses!
-> GAME            [INFO ] You guessed 'widdy' in 7 guesses!
-> GAME            [INFO ] You guessed 'hazel' in 7 guesses!
-> GAME            [INFO ] You guessed 'javer' in 7 guesses!
-> GAME            [INFO ] You guessed 'hoppy' in 7 guesses!
-> GAME            [INFO ] You guessed 'javer' in 7 guesses!
-> GAME            [INFO ] You guessed 'awing' in 7 guesses!
-> GAME            [INFO ] You guessed 'bevel' in 7 guesses!
-> GAME            [INFO ] You guessed 'linja' in 7 guesses!

### v4
Don't score for a letter in a position we already know, and don't double-count letters we already know in the score.

#### Score
RefreqyFlex3 v4 MAX_WRONGNESS = 5 RIGHT_PLACE_MULTIPLIER = 2
  winRate: 0.992,
  averageGuesses: 4.265

#### Missed
-> GAME            [INFO ] You guessed 'hazer' in 7 guesses!
-> GAME            [INFO ] You guessed 'roper' in 7 guesses!
-> GAME            [INFO ] You guessed 'mower' in 7 guesses!
-> GAME            [INFO ] You guessed 'fuffy' in 7 guesses!
-> GAME            [INFO ] You guessed 'razer' in 7 guesses!
-> GAME            [INFO ] You guessed 'javer' in 7 guesses!
-> GAME            [INFO ] You guessed 'roper' in 7 guesses!
-> GAME            [INFO ] You guessed 'mower' in 7 guesses!

### v5
Instead of no score for a duplicate letter, give a very low score.
Better to pick a duplicate letter than something we know is not in the word!

#### Score
RefreqyFlex3 v5 MAX_WRONGNESS = 5 RIGHT_PLACE_MULTIPLIER = 2
  winRate: 0.997,
  averageGuesses: 4.25

#### Misses
-> GAME            [INFO ] You guessed 'wafer' in 7 guesses!
-> GAME            [INFO ] You guessed 'jazzy' in 7 guesses!
-> GAME            [INFO ] You guessed 'hoper' in 7 guesses!
-> GAME            [INFO ] You guessed 'hoper' in 7 guesses!

### v6

#### Score
RefreqyFlex3 v6 MAX_WRONGNESS = 5 RIGHT_PLACE_MULTIPLIER = 2
  winRate: 0.991,
  averageGuesses: 4.321

#### Misses
-> GAME            [INFO ] You guessed 'hazer' in 7 guesses!
-> GAME            [INFO ] You guessed 'inial' in 7 guesses!
-> GAME            [INFO ] You guessed 'viver' in 7 guesses!
-> GAME            [INFO ] You guessed 'hover' in 7 guesses!
-> GAME            [INFO ] You guessed 'mower' in 7 guesses!
-> GAME            [INFO ] You guessed 'gazel' in 7 guesses!
-> GAME            [INFO ] You guessed 'faffy' in 7 guesses!
-> GAME            [INFO ] You guessed 'poker' in 7 guesses!
-> GAME            [INFO ] You guessed 'lolly' in 7 guesses!


### v6b
Bugfix to v6

#### Score
RefreqyFlex3 v6b MAX_WRONGNESS = 5 RIGHT_PLACE_MULTIPLIER = 1
  winRate: 0.99,
  averageGuesses: 4.282

#### Misses
-> GAME            [INFO ] You guessed 'cover' in 7 guesses!
-> GAME            [INFO ] You guessed 'hazer' in 7 guesses!
-> GAME            [INFO ] You guessed 'lolly' in 7 guesses!
-> GAME            [INFO ] You guessed 'hover' in 7 guesses!
-> GAME            [INFO ] You guessed 'froze' in 7 guesses!
-> GAME            [INFO ] You guessed 'linja' in 7 guesses!
-> GAME            [INFO ] You guessed 'bezel' in 7 guesses!
-> GAME            [INFO ] You guessed 'hazer' in 7 guesses!
-> GAME            [INFO ] You guessed 'jazzy' in 7 guesses!
-> GAME            [INFO ] You guessed 'hiver' in 7 guesses!

### v7a
Keeps v6b, plus take a real guess if it's as good as a new guess.

#### Score
RefreqyFlex3 v7a MAX_WRONGNESS = 5 RIGHT_PLACE_MULTIPLIER = 1
  winRate: 0.997,
  averageGuesses: 4.289

### Misses
-> GAME            [INFO ] You guessed 'peery' in 7 guesses!
-> GAME            [INFO ] You guessed 'pappy' in 7 guesses!
-> GAME            [INFO ] You guessed 'molly' in 7 guesses!

### v7b
Removes v6b, plus take a real guess if it's as good as a new guess.

#### Score
RefreqyFlex3 v7b MAX_WRONGNESS = 5 RIGHT_PLACE_MULTIPLIER = 1
  winRate: 0.996,
  averageGuesses: 4.157

### Misses
-> GAME            [INFO ] You guessed 'ninny' in 7 guesses!
-> GAME            [INFO ] You guessed 'jaded' in 8 guesses!
-> GAME            [INFO ] You guessed 'yappy' in 7 guesses!

### v7c
v7b plus RIGHT_PLACE_MULTIPLIER = 0

#### Score
RefreqyFlex3 v7c MAX_WRONGNESS = 5 RIGHT_PLACE_MULTIPLIER = 0
  winRate: 0.997,
  averageGuesses: 4.37

#### Misses
-> GAME            [INFO ] You guessed 'jerky' in 7 guesses!
-> GAME            [INFO ] You guessed 'tiger' in 7 guesses!
-> GAME            [INFO ] You guessed 'kanga' in 7 guesses!

### v7d
Enhancement: In RefreqyFlex modes, use number of new letters as a tiebreaker with equal score.
Example:
  -> SCORE           [DEBUG] Top 50 Scores:
  {"word":"awaft","debug":"w/2 f/4 ","score":4},
  {"word":"jowpy","debug":"j/2 w/3 p/4 ","score":4},
  {"word":"pluff","debug":"p/2 f/4 ","score":4},
  {"word":"swift","debug":"w/2 f/4 ","score":4},

"jowpy" is a better guess because it tests 3 new letters, but we score "awaft" the same because 'f' has a higher frequency.

#### Score
RefreqyFlex3 v7d MAX_WRONGNESS = 5 RIGHT_PLACE_MULTIPLIER = 1
  winRate: 0.998,
  averageGuesses: 4.193

#### Misses
-> GAME            [INFO ] You guessed 'veery' in 7 guesses!
-> GAME            [INFO ] You guessed 'mazer' in 7 guesses!


### v7e
In RefreqyFlex modes, try sorting by new letter count first

#### Score
RefreqyFlex3 v7e MAX_WRONGNESS = 5 RIGHT_PLACE_MULTIPLIER = 1
  winRate: 0.82,
  averageGuesses: 5.211

NOT GOOD!

### v7f
Revert to v7d, then take a real guess on the last guess.

Note this is a tradeoff, we are more likely to guess within the number of guesses,
but if we don't the number of extra guesses will be larger.

#### Score
RefreqyFlex3 v7f MAX_WRONGNESS = 5 RIGHT_PLACE_MULTIPLIER = 1 GUESS_POSSIBILITIES_ON_LAST_GUESS = true
  winRate: 0.997,
  averageGuesses: 4.207

#### Misses
-> GAME            [INFO ] You guessed 'mazer' in 8 guesses!
-> GAME            [INFO ] You guessed 'jolly' in 7 guesses!
-> GAME            [INFO ] You guessed 'vower' in 7 guesses!

### v7g
Fix bug where duplicate letters we already know about get a 0.5 score instead of a 0 score.

#### Score
RefreqyFlex3 v7g MAX_WRONGNESS = 5 RIGHT_PLACE_MULTIPLIER = 1 GUESS_POSSIBILITIES_ON_LAST_GUESS = true
  winRate: 1,
  averageGuesses: 4.232

PERFECT SCORE!!


### v7h: Conditional probability / Surrogate Pairs
For example, we never need to guess "q" unless "u" is in the word.  Can we encode that into a strategy somehow?
Fiture out which letters we don't need to guess because they are implied by other letters?

#### Score
RefreqyFlex3 v7g MAX_WRONGNESS = 5 RIGHT_PLACE_MULTIPLIER = 1 GUESS_POSSIBILITIES_ON_LAST_GUESS = true
  winRate: 0.995,
  averageGuesses: 4.242

#### Misses
-> GAME            [INFO ] You guessed 'woozy' in 7 guesses!
-> GAME            [INFO ] You guessed 'pence' in 7 guesses!


## RefreqyFlex4: Avoid letters which are too popular at first
By starting with the most popular letters, we are left with letters that are infrequent and so hard to incorporate into
other words; often later guesses only get 1-2 new characters out of all 5.  In other words, the very popular letters
we will get naturally when guessing other words, so maybe we should start with the least popular ones?

At 1.00, this is the same as RefreqyFlex3 v7h

#### Score
RefreqyFlex4 v1 MAX_WRONGNESS = 5 RIGHT_PLACE_MULTIPLIER = 1 GUESS_POSSIBILITIES_ON_LAST_GUESS = true HIGH_SCORE_PERCENTILE = 1.00
  winRate: 0.999,
  averageGuesses: 4.273

#### Score
RefreqyFlex4 v1 MAX_WRONGNESS = 5 RIGHT_PLACE_MULTIPLIER = 1 GUESS_POSSIBILITIES_ON_LAST_GUESS = true HIGH_SCORE_PERCENTILE = 0.50
  winRate: 0.683,
  averageGuesses: 5.716

RefreqyFlex4 v1 MAX_WRONGNESS = 5 RIGHT_PLACE_MULTIPLIER = 1 GUESS_POSSIBILITIES_ON_LAST_GUESS = true HIGH_SCORE_PERCENTILE = 0.90
  winRate: 0.889,
  averageGuesses: 5.164

RefreqyFlex4 v1 MAX_WRONGNESS = 5 RIGHT_PLACE_MULTIPLIER = 1 GUESS_POSSIBILITIES_ON_LAST_GUESS = true HIGH_SCORE_PERCENTILE = 0.95
  winRate: 0.922,
  averageGuesses: 5.009

RefreqyFlex4 v1 MAX_WRONGNESS = 5 RIGHT_PLACE_MULTIPLIER = 1 GUESS_POSSIBILITIES_ON_LAST_GUESS = true HIGH_SCORE_PERCENTILE = 0.99
  winRate: 0.983,
  averageGuesses: 4.679

### Possible Enhancements

## Maximum Discernment
When we have the list of words narrowed down, which letters would most help us discern from the remaining ones?
For example, if our possible words are: glare, blare, flare and we have xLARE, our best approach is not to try
the words serially, but to try a word with "g", "b", and "f" in it, e.g. "befog"
This is different from using frequency tables (I think).

# Things to look into

